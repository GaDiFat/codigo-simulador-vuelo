{"ast":null,"code":"import React from\"react\";import{Prism as SyntaxHighlighter}from\"react-syntax-highlighter\";import{coy}from\"react-syntax-highlighter/dist/esm/styles/prism\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const InsertionSortPage=()=>{const cppCode=`#include <iostream> // Librería estándar para entrada y salida\n    using namespace std;\n    \n    // Función que implementa el algoritmo de ordenamiento por inserción\n    void insertionSort(int arr[], int n) {\n        // Itera sobre cada elemento a partir del segundo (índice 1)\n        for (int i = 1; i < n; i++) {\n            int key = arr[i]; // \"key\" es el elemento que se insertará en la parte ordenada\n            int j = i - 1;    // Índice del último elemento de la parte ordenada\n    \n            // Mueve elementos mayores que \"key\" una posición hacia adelante\n            while (j >= 0 && arr[j] > key) {\n                arr[j + 1] = arr[j]; // Desplaza el elemento hacia la derecha\n                j = j - 1;           // Decrementa el índice para continuar la comparación\n            }\n            // Inserta el \"key\" en su posición correcta en la parte ordenada\n            arr[j + 1] = key;\n        }\n    }\n    \n    int main() {\n        int arr[] = {12, 11, 13, 5, 6}; // Arreglo inicial sin ordenar\n        int n = sizeof(arr) / sizeof(arr[0]); // Calcula el tamaño del arreglo\n    \n        // Llama a la función de ordenamiento por inserción\n        insertionSort(arr, n);\n    \n        // Imprime el arreglo ordenado\n        cout << \"Array ordenado: \";\n        for (int i = 0; i < n; i++)\n            cout << arr[i] << \" \"; // Muestra cada elemento del arreglo\n        return 0; // Finaliza el programa\n    }`;return/*#__PURE__*/_jsxs(\"div\",{style:{padding:\"20px\"},children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Algoritmo de Ordenamiento por Inserci\\xF3n\"}),/*#__PURE__*/_jsx(\"p\",{children:\"El ordenamiento por inserci\\xF3n es un algoritmo eficiente para ordenar peque\\xF1os conjuntos de datos. Iterativamente construye la lista ordenada desplazando elementos seg\\xFAn sea necesario.\"}),/*#__PURE__*/_jsx(\"h2\",{children:\"C\\xF3digo en C++\"}),/*#__PURE__*/_jsx(SyntaxHighlighter,{language:\"cpp\",style:coy,children:cppCode})]});};export default InsertionSortPage;","map":{"version":3,"names":["React","Prism","SyntaxHighlighter","coy","jsx","_jsx","jsxs","_jsxs","InsertionSortPage","cppCode","style","padding","children","language"],"sources":["C:/Users/gdfat/Documents/GitHub/insertion-sorting/src/InsertionSortPage.js"],"sourcesContent":["import React from \"react\";\r\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\r\nimport { coy } from \"react-syntax-highlighter/dist/esm/styles/prism\";\r\n\r\nconst InsertionSortPage = () => {\r\n  const cppCode = `#include <iostream> // Librería estándar para entrada y salida\r\n    using namespace std;\r\n    \r\n    // Función que implementa el algoritmo de ordenamiento por inserción\r\n    void insertionSort(int arr[], int n) {\r\n        // Itera sobre cada elemento a partir del segundo (índice 1)\r\n        for (int i = 1; i < n; i++) {\r\n            int key = arr[i]; // \"key\" es el elemento que se insertará en la parte ordenada\r\n            int j = i - 1;    // Índice del último elemento de la parte ordenada\r\n    \r\n            // Mueve elementos mayores que \"key\" una posición hacia adelante\r\n            while (j >= 0 && arr[j] > key) {\r\n                arr[j + 1] = arr[j]; // Desplaza el elemento hacia la derecha\r\n                j = j - 1;           // Decrementa el índice para continuar la comparación\r\n            }\r\n            // Inserta el \"key\" en su posición correcta en la parte ordenada\r\n            arr[j + 1] = key;\r\n        }\r\n    }\r\n    \r\n    int main() {\r\n        int arr[] = {12, 11, 13, 5, 6}; // Arreglo inicial sin ordenar\r\n        int n = sizeof(arr) / sizeof(arr[0]); // Calcula el tamaño del arreglo\r\n    \r\n        // Llama a la función de ordenamiento por inserción\r\n        insertionSort(arr, n);\r\n    \r\n        // Imprime el arreglo ordenado\r\n        cout << \"Array ordenado: \";\r\n        for (int i = 0; i < n; i++)\r\n            cout << arr[i] << \" \"; // Muestra cada elemento del arreglo\r\n        return 0; // Finaliza el programa\r\n    }`;\r\n\r\n  return (\r\n    <div style={{ padding: \"20px\" }}>\r\n      <h1>Algoritmo de Ordenamiento por Inserción</h1>\r\n      <p>\r\n        El ordenamiento por inserción es un algoritmo eficiente para ordenar\r\n        pequeños conjuntos de datos. Iterativamente construye la lista ordenada\r\n        desplazando elementos según sea necesario.\r\n      </p>\r\n      <h2>Código en C++</h2>\r\n      <SyntaxHighlighter language=\"cpp\" style={coy}>\r\n        {cppCode}\r\n      </SyntaxHighlighter>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InsertionSortPage;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,KAAK,GAAI,CAAAC,iBAAiB,KAAQ,0BAA0B,CACrE,OAASC,GAAG,KAAQ,gDAAgD,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAErE,KAAM,CAAAC,iBAAiB,CAAGA,CAAA,GAAM,CAC9B,KAAM,CAAAC,OAAO,CAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,CAEJ,mBACEF,KAAA,QAAKG,KAAK,CAAE,CAAEC,OAAO,CAAE,MAAO,CAAE,CAAAC,QAAA,eAC9BP,IAAA,OAAAO,QAAA,CAAI,4CAAuC,CAAI,CAAC,cAChDP,IAAA,MAAAO,QAAA,CAAG,kMAIH,CAAG,CAAC,cACJP,IAAA,OAAAO,QAAA,CAAI,kBAAa,CAAI,CAAC,cACtBP,IAAA,CAACH,iBAAiB,EAACW,QAAQ,CAAC,KAAK,CAACH,KAAK,CAAEP,GAAI,CAAAS,QAAA,CAC1CH,OAAO,CACS,CAAC,EACjB,CAAC,CAEV,CAAC,CAED,cAAe,CAAAD,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gdfat\\\\Documents\\\\Web Development\\\\ProyectosReact\\\\insertion\\\\src\\\\InsertionSortExplanation.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InsertionSortExplanation = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"20px\",\n      fontFamily: \"Arial, sans-serif\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Algoritmo de Ordenamiento por Inserci\\xF3n\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"El ordenamiento por inserci\\xF3n es un algoritmo eficiente para ordenar peque\\xF1os conjuntos de datos. La idea es dividir el arreglo en dos partes: una parte ordenada y otra desordenada.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\xBFC\\xF3mo funciona?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Empieza considerando el primer elemento como ordenado.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Selecciona el siguiente elemento de la parte desordenada y comp\\xE1ralo con los elementos de la parte ordenada, de derecha a izquierda.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Desplaza los elementos mayores al \\\"key\\\" hacia la derecha para hacer espacio.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Inserta el \\\"key\\\" en su posici\\xF3n correcta dentro de la parte ordenada.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Repite este proceso hasta que todo el arreglo est\\xE9 ordenado.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Visualizaci\\xF3n del Ejemplo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Supongamos que queremos ordenar el arreglo\", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"[12, 11, 13, 5, 6]\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), \". A trav\\xE9s de varias iteraciones, los elementos se comparan y se insertan en su posici\\xF3n correcta.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Ventajas y Desventajas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Ventajas:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this), \" Simple de implementar y eficiente para conjuntos de datos peque\\xF1os.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Desventajas:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), \" Para conjuntos de datos grandes, su tiempo de ejecuci\\xF3n puede ser lento en el peor caso.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n};\n_c = InsertionSortExplanation;\nexport default InsertionSortExplanation;\nvar _c;\n$RefreshReg$(_c, \"InsertionSortExplanation\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","InsertionSortExplanation","style","padding","fontFamily","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/gdfat/Documents/Web Development/ProyectosReact/insertion/src/InsertionSortExplanation.js"],"sourcesContent":["import React from \"react\";\r\n\r\nconst InsertionSortExplanation = () => {\r\n  return (\r\n    <div style={{ padding: \"20px\", fontFamily: \"Arial, sans-serif\" }}>\r\n      <h1>Algoritmo de Ordenamiento por Inserción</h1>\r\n      <p>\r\n        El ordenamiento por inserción es un algoritmo eficiente para ordenar\r\n        pequeños conjuntos de datos. La idea es dividir el arreglo en dos\r\n        partes: una parte ordenada y otra desordenada.\r\n      </p>\r\n      <h2>¿Cómo funciona?</h2>\r\n      <ol>\r\n        <li>Empieza considerando el primer elemento como ordenado.</li>\r\n        <li>\r\n          Selecciona el siguiente elemento de la parte desordenada y compáralo\r\n          con los elementos de la parte ordenada, de derecha a izquierda.\r\n        </li>\r\n        <li>\r\n          Desplaza los elementos mayores al \"key\" hacia la derecha para hacer\r\n          espacio.\r\n        </li>\r\n        <li>\r\n          Inserta el \"key\" en su posición correcta dentro de la parte ordenada.\r\n        </li>\r\n        <li>Repite este proceso hasta que todo el arreglo esté ordenado.</li>\r\n      </ol>\r\n      <h2>Visualización del Ejemplo</h2>\r\n      <p>\r\n        Supongamos que queremos ordenar el arreglo{\" \"}\r\n        <strong>[12, 11, 13, 5, 6]</strong>. A través de varias iteraciones, los\r\n        elementos se comparan y se insertan en su posición correcta.\r\n      </p>\r\n      <h2>Ventajas y Desventajas</h2>\r\n      <ul>\r\n        <li>\r\n          <strong>Ventajas:</strong> Simple de implementar y eficiente para\r\n          conjuntos de datos pequeños.\r\n        </li>\r\n        <li>\r\n          <strong>Desventajas:</strong> Para conjuntos de datos grandes, su\r\n          tiempo de ejecución puede ser lento en el peor caso.\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InsertionSortExplanation;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import React from\"react\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const InsertionSortExplanation=()=>{return/*#__PURE__*/_jsxs(\"div\",{style:{padding:\"20px\",fontFamily:\"Arial, sans-serif\"},children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Algoritmo de Ordenamiento por Inserci\\xF3n\"}),/*#__PURE__*/_jsx(\"p\",{children:\"El ordenamiento por inserci\\xF3n es un algoritmo eficiente para ordenar peque\\xF1os conjuntos de datos. La idea es dividir el arreglo en dos partes: una parte ordenada y otra desordenada.\"}),/*#__PURE__*/_jsx(\"h2\",{children:\"\\xBFC\\xF3mo funciona?\"}),/*#__PURE__*/_jsxs(\"ol\",{children:[/*#__PURE__*/_jsx(\"li\",{children:\"Empieza considerando el primer elemento como ordenado.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Selecciona el siguiente elemento de la parte desordenada y comp\\xE1ralo con los elementos de la parte ordenada, de derecha a izquierda.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Desplaza los elementos mayores al \\\"key\\\" hacia la derecha para hacer espacio.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Inserta el \\\"key\\\" en su posici\\xF3n correcta dentro de la parte ordenada.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Repite este proceso hasta que todo el arreglo est\\xE9 ordenado.\"})]}),/*#__PURE__*/_jsx(\"h2\",{children:\"Visualizaci\\xF3n del Ejemplo\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Supongamos que queremos ordenar el arreglo\",\" \",/*#__PURE__*/_jsx(\"strong\",{children:\"[12, 11, 13, 5, 6]\"}),\". A trav\\xE9s de varias iteraciones, los elementos se comparan y se insertan en su posici\\xF3n correcta.\"]}),/*#__PURE__*/_jsx(\"h2\",{children:\"Ventajas y Desventajas\"}),/*#__PURE__*/_jsxs(\"ul\",{children:[/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Ventajas:\"}),\" Simple de implementar y eficiente para conjuntos de datos peque\\xF1os.\"]}),/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Desventajas:\"}),\" Para conjuntos de datos grandes, su tiempo de ejecuci\\xF3n puede ser lento en el peor caso.\"]})]})]});};export default InsertionSortExplanation;","map":{"version":3,"names":["React","jsx","_jsx","jsxs","_jsxs","InsertionSortExplanation","style","padding","fontFamily","children"],"sources":["C:/Users/gdfat/Documents/Web Development/ProyectosReact/insertion-sorting/src/InsertionSortExplanation.js"],"sourcesContent":["import React from \"react\";\r\n\r\nconst InsertionSortExplanation = () => {\r\n  return (\r\n    <div style={{ padding: \"20px\", fontFamily: \"Arial, sans-serif\" }}>\r\n      <h1>Algoritmo de Ordenamiento por Inserción</h1>\r\n      <p>\r\n        El ordenamiento por inserción es un algoritmo eficiente para ordenar\r\n        pequeños conjuntos de datos. La idea es dividir el arreglo en dos\r\n        partes: una parte ordenada y otra desordenada.\r\n      </p>\r\n      <h2>¿Cómo funciona?</h2>\r\n      <ol>\r\n        <li>Empieza considerando el primer elemento como ordenado.</li>\r\n        <li>\r\n          Selecciona el siguiente elemento de la parte desordenada y compáralo\r\n          con los elementos de la parte ordenada, de derecha a izquierda.\r\n        </li>\r\n        <li>\r\n          Desplaza los elementos mayores al \"key\" hacia la derecha para hacer\r\n          espacio.\r\n        </li>\r\n        <li>\r\n          Inserta el \"key\" en su posición correcta dentro de la parte ordenada.\r\n        </li>\r\n        <li>Repite este proceso hasta que todo el arreglo esté ordenado.</li>\r\n      </ol>\r\n      <h2>Visualización del Ejemplo</h2>\r\n      <p>\r\n        Supongamos que queremos ordenar el arreglo{\" \"}\r\n        <strong>[12, 11, 13, 5, 6]</strong>. A través de varias iteraciones, los\r\n        elementos se comparan y se insertan en su posición correcta.\r\n      </p>\r\n      <h2>Ventajas y Desventajas</h2>\r\n      <ul>\r\n        <li>\r\n          <strong>Ventajas:</strong> Simple de implementar y eficiente para\r\n          conjuntos de datos pequeños.\r\n        </li>\r\n        <li>\r\n          <strong>Desventajas:</strong> Para conjuntos de datos grandes, su\r\n          tiempo de ejecución puede ser lento en el peor caso.\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InsertionSortExplanation;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAE1B,KAAM,CAAAC,wBAAwB,CAAGA,CAAA,GAAM,CACrC,mBACED,KAAA,QAAKE,KAAK,CAAE,CAAEC,OAAO,CAAE,MAAM,CAAEC,UAAU,CAAE,mBAAoB,CAAE,CAAAC,QAAA,eAC/DP,IAAA,OAAAO,QAAA,CAAI,4CAAuC,CAAI,CAAC,cAChDP,IAAA,MAAAO,QAAA,CAAG,6LAIH,CAAG,CAAC,cACJP,IAAA,OAAAO,QAAA,CAAI,uBAAe,CAAI,CAAC,cACxBL,KAAA,OAAAK,QAAA,eACEP,IAAA,OAAAO,QAAA,CAAI,wDAAsD,CAAI,CAAC,cAC/DP,IAAA,OAAAO,QAAA,CAAI,yIAGJ,CAAI,CAAC,cACLP,IAAA,OAAAO,QAAA,CAAI,gFAGJ,CAAI,CAAC,cACLP,IAAA,OAAAO,QAAA,CAAI,4EAEJ,CAAI,CAAC,cACLP,IAAA,OAAAO,QAAA,CAAI,iEAA4D,CAAI,CAAC,EACnE,CAAC,cACLP,IAAA,OAAAO,QAAA,CAAI,8BAAyB,CAAI,CAAC,cAClCL,KAAA,MAAAK,QAAA,EAAG,4CACyC,CAAC,GAAG,cAC9CP,IAAA,WAAAO,QAAA,CAAQ,oBAAkB,CAAQ,CAAC,2GAErC,EAAG,CAAC,cACJP,IAAA,OAAAO,QAAA,CAAI,wBAAsB,CAAI,CAAC,cAC/BL,KAAA,OAAAK,QAAA,eACEL,KAAA,OAAAK,QAAA,eACEP,IAAA,WAAAO,QAAA,CAAQ,WAAS,CAAQ,CAAC,0EAE5B,EAAI,CAAC,cACLL,KAAA,OAAAK,QAAA,eACEP,IAAA,WAAAO,QAAA,CAAQ,cAAY,CAAQ,CAAC,+FAE/B,EAAI,CAAC,EACH,CAAC,EACF,CAAC,CAEV,CAAC,CAED,cAAe,CAAAJ,wBAAwB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gdfat\\\\Documents\\\\Web Development\\\\ProyectosReact\\\\insertion\\\\src\\\\InsertionSortPage.js\";\nimport React from \"react\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { coy } from \"react-syntax-highlighter/dist/esm/styles/prism\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InsertionSortPage = () => {\n  const cppCode = `#include <iostream> // Librería estándar para entrada y salida\n    using namespace std;\n    \n    // Función que implementa el algoritmo de ordenamiento por inserción\n    void insertionSort(int arr[], int n) {\n        // Itera sobre cada elemento a partir del segundo (índice 1)\n        for (int i = 1; i < n; i++) {\n            int key = arr[i]; // \"key\" es el elemento que se insertará en la parte ordenada\n            int j = i - 1;    // Índice del último elemento de la parte ordenada\n    \n            // Mueve elementos mayores que \"key\" una posición hacia adelante\n            while (j >= 0 && arr[j] > key) {\n                arr[j + 1] = arr[j]; // Desplaza el elemento hacia la derecha\n                j = j - 1;           // Decrementa el índice para continuar la comparación\n            }\n            // Inserta el \"key\" en su posición correcta en la parte ordenada\n            arr[j + 1] = key;\n        }\n    }\n    \n    int main() {\n        int arr[] = {12, 11, 13, 5, 6}; // Arreglo inicial sin ordenar\n        int n = sizeof(arr) / sizeof(arr[0]); // Calcula el tamaño del arreglo\n    \n        // Llama a la función de ordenamiento por inserción\n        insertionSort(arr, n);\n    \n        // Imprime el arreglo ordenado\n        cout << \"Array ordenado: \";\n        for (int i = 0; i < n; i++)\n            cout << arr[i] << \" \"; // Muestra cada elemento del arreglo\n        return 0; // Finaliza el programa\n    }`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Algoritmo de Ordenamiento por Inserci\\xF3n\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"El ordenamiento por inserci\\xF3n es un algoritmo eficiente para ordenar peque\\xF1os conjuntos de datos. Iterativamente construye la lista ordenada desplazando elementos seg\\xFAn sea necesario.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"C\\xF3digo en C++\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SyntaxHighlighter, {\n      language: \"cpp\",\n      style: coy,\n      children: cppCode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_c = InsertionSortPage;\nexport default InsertionSortPage;\nvar _c;\n$RefreshReg$(_c, \"InsertionSortPage\");","map":{"version":3,"names":["React","Prism","SyntaxHighlighter","coy","jsxDEV","_jsxDEV","InsertionSortPage","cppCode","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","language","_c","$RefreshReg$"],"sources":["C:/Users/gdfat/Documents/Web Development/ProyectosReact/insertion/src/InsertionSortPage.js"],"sourcesContent":["import React from \"react\";\r\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\r\nimport { coy } from \"react-syntax-highlighter/dist/esm/styles/prism\";\r\n\r\nconst InsertionSortPage = () => {\r\n  const cppCode = `#include <iostream> // Librería estándar para entrada y salida\r\n    using namespace std;\r\n    \r\n    // Función que implementa el algoritmo de ordenamiento por inserción\r\n    void insertionSort(int arr[], int n) {\r\n        // Itera sobre cada elemento a partir del segundo (índice 1)\r\n        for (int i = 1; i < n; i++) {\r\n            int key = arr[i]; // \"key\" es el elemento que se insertará en la parte ordenada\r\n            int j = i - 1;    // Índice del último elemento de la parte ordenada\r\n    \r\n            // Mueve elementos mayores que \"key\" una posición hacia adelante\r\n            while (j >= 0 && arr[j] > key) {\r\n                arr[j + 1] = arr[j]; // Desplaza el elemento hacia la derecha\r\n                j = j - 1;           // Decrementa el índice para continuar la comparación\r\n            }\r\n            // Inserta el \"key\" en su posición correcta en la parte ordenada\r\n            arr[j + 1] = key;\r\n        }\r\n    }\r\n    \r\n    int main() {\r\n        int arr[] = {12, 11, 13, 5, 6}; // Arreglo inicial sin ordenar\r\n        int n = sizeof(arr) / sizeof(arr[0]); // Calcula el tamaño del arreglo\r\n    \r\n        // Llama a la función de ordenamiento por inserción\r\n        insertionSort(arr, n);\r\n    \r\n        // Imprime el arreglo ordenado\r\n        cout << \"Array ordenado: \";\r\n        for (int i = 0; i < n; i++)\r\n            cout << arr[i] << \" \"; // Muestra cada elemento del arreglo\r\n        return 0; // Finaliza el programa\r\n    }`;\r\n\r\n  return (\r\n    <div style={{ padding: \"20px\" }}>\r\n      <h1>Algoritmo de Ordenamiento por Inserción</h1>\r\n      <p>\r\n        El ordenamiento por inserción es un algoritmo eficiente para ordenar\r\n        pequeños conjuntos de datos. Iterativamente construye la lista ordenada\r\n        desplazando elementos según sea necesario.\r\n      </p>\r\n      <h2>Código en C++</h2>\r\n      <SyntaxHighlighter language=\"cpp\" style={coy}>\r\n        {cppCode}\r\n      </SyntaxHighlighter>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InsertionSortPage;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,IAAIC,iBAAiB,QAAQ,0BAA0B;AACrE,SAASC,GAAG,QAAQ,gDAAgD;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErE,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAC9B,MAAMC,OAAO,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;EAEJ,oBACEF,OAAA;IAAKG,KAAK,EAAE;MAAEC,OAAO,EAAE;IAAO,CAAE;IAAAC,QAAA,gBAC9BL,OAAA;MAAAK,QAAA,EAAI;IAAuC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChDT,OAAA;MAAAK,QAAA,EAAG;IAIH;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACJT,OAAA;MAAAK,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtBT,OAAA,CAACH,iBAAiB;MAACa,QAAQ,EAAC,KAAK;MAACP,KAAK,EAAEL,GAAI;MAAAO,QAAA,EAC1CH;IAAO;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACS,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjB,CAAC;AAEV,CAAC;AAACE,EAAA,GAjDIV,iBAAiB;AAmDvB,eAAeA,iBAAiB;AAAC,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
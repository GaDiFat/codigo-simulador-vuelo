{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gdfat\\\\Documents\\\\Web Development\\\\ProyectosReact\\\\insertion\\\\src\\\\InsertionSortPage.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InsertionSortPage = () => {\n  const cppCode = `\n#include <iostream>\nusing namespace std;\n\nvoid insertionSort(int arr[], int n) {\n    for (int i = 1; i < n; i++) {\n        int key = arr[i];\n        int j = i - 1;\n\n        // Mueve los elementos que son mayores que key una posición hacia adelante.\n        while (j >= 0 && arr[j] > key) {\n            arr[j + 1] = arr[j];\n            j = j - 1;\n        }\n        arr[j + 1] = key;\n    }\n}\n\nint main() {\n    int arr[] = {12, 11, 13, 5, 6};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    insertionSort(arr, n);\n\n    cout << \"Array ordenado: \";\n    for (int i = 0; i < n; i++)\n        cout << arr[i] << \" \";\n    return 0;\n}\n`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Algoritmo de Ordenamiento por Inserci\\xF3n\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"El ordenamiento por inserci\\xF3n es un algoritmo eficiente para ordenar peque\\xF1os conjuntos de datos. Iterativamente construye la lista ordenada desplazando elementos seg\\xFAn sea necesario.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"C\\xF3digo en C++\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      style: {\n        backgroundColor: \"#f4f4f4\",\n        padding: \"10px\",\n        borderRadius: \"5px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"code\", {\n        children: cppCode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_c = InsertionSortPage;\nexport default InsertionSortPage;\nvar _c;\n$RefreshReg$(_c, \"InsertionSortPage\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","InsertionSortPage","cppCode","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","backgroundColor","borderRadius","_c","$RefreshReg$"],"sources":["C:/Users/gdfat/Documents/Web Development/ProyectosReact/insertion/src/InsertionSortPage.js"],"sourcesContent":["import React from \"react\";\r\n\r\nconst InsertionSortPage = () => {\r\n  const cppCode = `\r\n#include <iostream>\r\nusing namespace std;\r\n\r\nvoid insertionSort(int arr[], int n) {\r\n    for (int i = 1; i < n; i++) {\r\n        int key = arr[i];\r\n        int j = i - 1;\r\n\r\n        // Mueve los elementos que son mayores que key una posición hacia adelante.\r\n        while (j >= 0 && arr[j] > key) {\r\n            arr[j + 1] = arr[j];\r\n            j = j - 1;\r\n        }\r\n        arr[j + 1] = key;\r\n    }\r\n}\r\n\r\nint main() {\r\n    int arr[] = {12, 11, 13, 5, 6};\r\n    int n = sizeof(arr) / sizeof(arr[0]);\r\n\r\n    insertionSort(arr, n);\r\n\r\n    cout << \"Array ordenado: \";\r\n    for (int i = 0; i < n; i++)\r\n        cout << arr[i] << \" \";\r\n    return 0;\r\n}\r\n`;\r\n\r\n  return (\r\n    <div style={{ padding: \"20px\" }}>\r\n      <h1>Algoritmo de Ordenamiento por Inserción</h1>\r\n      <p>\r\n        El ordenamiento por inserción es un algoritmo eficiente para ordenar\r\n        pequeños conjuntos de datos. Iterativamente construye la lista ordenada\r\n        desplazando elementos según sea necesario.\r\n      </p>\r\n      <h2>Código en C++</h2>\r\n      <pre\r\n        style={{\r\n          backgroundColor: \"#f4f4f4\",\r\n          padding: \"10px\",\r\n          borderRadius: \"5px\",\r\n        }}\r\n      >\r\n        <code>{cppCode}</code>\r\n      </pre>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InsertionSortPage;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAC9B,MAAMC,OAAO,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;EAEC,oBACEF,OAAA;IAAKG,KAAK,EAAE;MAAEC,OAAO,EAAE;IAAO,CAAE;IAAAC,QAAA,gBAC9BL,OAAA;MAAAK,QAAA,EAAI;IAAuC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChDT,OAAA;MAAAK,QAAA,EAAG;IAIH;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACJT,OAAA;MAAAK,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtBT,OAAA;MACEG,KAAK,EAAE;QACLO,eAAe,EAAE,SAAS;QAC1BN,OAAO,EAAE,MAAM;QACfO,YAAY,EAAE;MAChB,CAAE;MAAAN,QAAA,eAEFL,OAAA;QAAAK,QAAA,EAAOH;MAAO;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACG,EAAA,GApDIX,iBAAiB;AAsDvB,eAAeA,iBAAiB;AAAC,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}